// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  role         Role
  departmentId Int?
  divisionId   Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  division     Division?   @relation(fields: [divisionId], references: [id])
  articles     Article[]
  events       Event[]     @relation("CreatedEvents")
  attendances  Attendance[]
  products     Product[]
  refreshToken   String?  @db.Text
  lastLoginAt    DateTime?
  passwordChangedAt DateTime?
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  divisions Division[]
  createdBy Int?
  createdAt DateTime @default(now())
  updatedBy Int?
  updatedAt DateTime @updatedAt
}

model Division {
  id           Int      @id @default(autoincrement())
  name         String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  users        User[]
  createdBy    Int?
  createdAt    DateTime @default(now())
  updatedBy    Int?
  updatedAt    DateTime @updatedAt
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  startTime   DateTime
  endTime     DateTime
  isPublic    Boolean  @default(true)
  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])
  createdById Int
  attendances Attendance[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  proofUrl   String
  checkedAt  DateTime
  createdAt  DateTime @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  orders      Order[]
}

model Order {
  id           Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int
  buyerName    String
  buyerEmail   String
  buyerPhone   String
  buyerAddress String
  totalPrice   Float
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now())
}

enum Role {
  admin
  ketua_umum
  ketua_departemen
  ketua_divisi
  sekretaris
  bendahara
  pengurus
  anggota
}

enum OrderStatus {
  pending
  paid
  shipped
  cancelled
}

