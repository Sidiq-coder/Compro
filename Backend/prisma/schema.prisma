// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         Role
  departmentId Int?
  divisionId   Int?
  department   Department?   @relation(fields: [departmentId], references: [id])
  division     Division?     @relation(fields: [divisionId], references: [id])
  articles     Article[]
  events       Event[]       @relation("CreatedEvents")
  attendances  Attendance[]
  products     Product[]
  refreshToken String?       @db.Text
  lastLoginAt  DateTime?
  passwordChangedAt DateTime?
  canCreateEvents Boolean    @default(false)

  // Opposite relation for Attendance.validatedBy
  validatedAttendances Attendance[] @relation("ValidatedAttendances")
  
}

model Department {
   id       Int           @id @default(autoincrement())
  name     String
  users    User[]
  divisions Division[]
  articlePermissions ArticlePermission[]
  allowedEvents Event[]  @relation("EventAllowedDepartments")
}

model Division {
  id           Int      @id @default(autoincrement())
  name         String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  users        User[]
}

model Article {
  id            Int           @id @default(autoincrement())
  title         String
  content       String
  thumbnailUrl  String?       // opsional, misalnya URL dari Cloudinary, S3, dsb.
  attachmentUrl String?       // opsional, bisa untuk file PDF, DOCX, ZIP, dll.
  externalLink  String?       // opsional, untuk link ke artikel luar
  status        ArticleStatus @default(draft) // status artikel
  author        User          @relation(fields: [authorId], references: [id])
  authorId      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Event {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  location     String
  startTime    DateTime
  endTime      DateTime
  eventType    EventType     @default(internal)
  isPaid       Boolean       @default(false)
  price        Float?
  hasRegistration Boolean    @default(false)
  registrationDeadline DateTime?
  createdBy    User          @relation("CreatedEvents", fields: [createdById], references: [id])
  createdById  Int
  attendances  Attendance[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  allowedDepartments Department[] @relation("EventAllowedDepartments")
}

model Attendance {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  event       Event         @relation(fields: [eventId], references: [id])
  eventId     Int
  proofUrls   String?       @db.Text // Store as JSON or comma-separated string
  notes       String?
  checkedAt   DateTime?
  validatedAt DateTime?
  validatedBy User?         @relation("ValidatedAttendances", fields: [validatedById], references: [id])
  validatedById Int?
  rejectionReason String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, eventId])
}
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  orders      Order[]
}

model Order {
  id           Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int
  buyerName    String
  buyerEmail   String
  buyerPhone   String
  buyerAddress String
  totalPrice   Float
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now())
}

model ArticlePermission {
  id           Int        @id @default(autoincrement())
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([departmentId])
}

enum Role {
  admin
  ketua_umum
  ketua_departemen
  ketua_divisi
  sekretaris
  bendahara
  pengurus
  anggota
}

enum OrderStatus {
  pending
  paid
  shipped
  cancelled
}

enum ArticleStatus {
  draft
  published
}

enum EventType {
  internal
  public
}

enum AttendanceStatus {
  pending
  present
  absent
  excused
  rejected
}


